# Generated by Django 5.0.6 on 2024-05-11 18:32

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import sanamente.blocks
import sanamente.snippets
import wagtail.blocks
import wagtail.fields
import wagtail.snippets.blocks
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0093_uploadedfile"),
        ("wagtailimages", "0026_delete_uploadedimage"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoriaActividadBienestar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Categoria de actividad de bienestar",
                "verbose_name_plural": "Categorias de actividades de bienestar",
            },
        ),
        migrations.CreateModel(
            name="CategoriaEntradaBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Categoría de entradas de blog",
                "verbose_name_plural": "Categorías de entradas de blog",
            },
        ),
        migrations.CreateModel(
            name="CategoriaServicioProfesional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Categoria de servicios",
                "verbose_name_plural": "Categorias de servicios",
            },
        ),
        migrations.CreateModel(
            name="Color",
            fields=[
                (
                    "nombre",
                    models.CharField(max_length=120, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EspecialidadServicioProfesional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Especialidad de servicios",
                "verbose_name_plural": "Especialidades de servicios",
            },
        ),
        migrations.CreateModel(
            name="Icono",
            fields=[
                (
                    "nombre",
                    models.CharField(max_length=120, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ModalidadServicioProfesional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Modalidad de servicios",
                "verbose_name_plural": "Modalidades de servicios",
            },
        ),
        migrations.CreateModel(
            name="NumeroTelefonicoEmergencia",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField()),
                (
                    "contenido",
                    wagtail.fields.StreamField(
                        [
                            ("texto_enriquecido", sanamente.blocks.RichTextBlock()),
                            (
                                "tabs",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "tab",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "expandible",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "item",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "linea_tiempo",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "evento",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "titulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "subtitulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "color",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Color,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "icono",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Icono,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "avatar",
                                                        sanamente.blocks.ImagenAvatarChooserBlock(
                                                            label="Avatar",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "boton_accion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "accion_tipo",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("", "Tipo de acción"),
                                                    ("sin_accion", "Sin acción"),
                                                    ("pagina", "Página"),
                                                    ("url", "URL"),
                                                ],
                                                classname="wagtailuiplus__choice-handler wagtailuiplus__choice-handler--accion_tipo",
                                            ),
                                        ),
                                        (
                                            "accion_pagina",
                                            wagtail.blocks.PageChooserBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--url wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_url",
                                            wagtail.blocks.URLBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--pagina wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_texto",
                                            wagtail.blocks.CharBlock(
                                                max_length=30, required=False
                                            ),
                                        ),
                                        (
                                            "accion_clase",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Color, required=False
                                            ),
                                        ),
                                        (
                                            "accion_alineacion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Alineación"),
                                                    ("izquierda", "Izquierda"),
                                                    ("centro", "Centro"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "icono",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Icono, required=False
                                            ),
                                        ),
                                        (
                                            "icono_posicion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("izquierda", "Izquierda"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        verbose_name="Contenido del cuerpo de la página",
                    ),
                ),
                (
                    "telefono",
                    models.CharField(
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([09]{1}\\d{2}|[1-9]{1}\\d{9})$",
                                message="Debe tener 3 o 10 dígitos y ser un número telefónico válido",
                            )
                        ],
                        verbose_name="Número telefónico",
                    ),
                ),
            ],
            options={
                "verbose_name": "Número telefónico de emergencia",
                "verbose_name_plural": "Números telefónicos de emergencia",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PaginaGrupoActividadBienestar",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Actividades de bienestar",
                "verbose_name_plural": "Actividades de bienestar",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PaginaGrupoBlog",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Entradas de blog",
                "verbose_name_plural": "Entradas de blog",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PaginaGrupoNumeroTelefonicoEmergencia",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Números telefónicos de emergencia",
                "verbose_name_plural": "Números telefónicos de emergencia",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PaginaGrupoServicioProfesional",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Servicios profesionales",
                "verbose_name_plural": "Servicios profesionales",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PaginaRaiz",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Raiz",
                "verbose_name_plural": "Raiz",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ActividadBienestar",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField()),
                (
                    "contenido",
                    wagtail.fields.StreamField(
                        [
                            ("texto_enriquecido", sanamente.blocks.RichTextBlock()),
                            (
                                "tabs",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "tab",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "expandible",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "item",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "linea_tiempo",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "evento",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "titulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "subtitulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "color",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Color,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "icono",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Icono,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "avatar",
                                                        sanamente.blocks.ImagenAvatarChooserBlock(
                                                            label="Avatar",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "boton_accion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "accion_tipo",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("", "Tipo de acción"),
                                                    ("sin_accion", "Sin acción"),
                                                    ("pagina", "Página"),
                                                    ("url", "URL"),
                                                ],
                                                classname="wagtailuiplus__choice-handler wagtailuiplus__choice-handler--accion_tipo",
                                            ),
                                        ),
                                        (
                                            "accion_pagina",
                                            wagtail.blocks.PageChooserBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--url wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_url",
                                            wagtail.blocks.URLBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--pagina wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_texto",
                                            wagtail.blocks.CharBlock(
                                                max_length=30, required=False
                                            ),
                                        ),
                                        (
                                            "accion_clase",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Color, required=False
                                            ),
                                        ),
                                        (
                                            "accion_alineacion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Alineación"),
                                                    ("izquierda", "Izquierda"),
                                                    ("centro", "Centro"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "icono",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Icono, required=False
                                            ),
                                        ),
                                        (
                                            "icono_posicion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("izquierda", "Izquierda"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        verbose_name="Contenido del cuerpo de la página",
                    ),
                ),
                (
                    "imagen",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Actividad de bienestar",
                "verbose_name_plural": "Actividades de bienestar",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ActividadBienestarEtiqueta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="sanamente.actividadbienestar",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="actividadbienestar",
            name="etiquetas",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="sanamente.ActividadBienestarEtiqueta",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="ActividadBienestarFavorito",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "actividad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sanamente.actividadbienestar",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Actividad de bienestar favorita",
                "verbose_name_plural": "Actividades de bienestar favoritas",
            },
        ),
        migrations.CreateModel(
            name="ActividadBienestarValoracion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "valoracion",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "actividad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sanamente.actividadbienestar",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Valoración de actividad de bienestar",
                "verbose_name_plural": "Valoraciones de actividades de bienestar",
            },
        ),
        migrations.CreateModel(
            name="BiografiaAutor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=120, unique=True)),
                (
                    "biografia_autor",
                    wagtail.fields.RichTextField(blank=True, max_length=255, null=True),
                ),
                (
                    "avatar",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Biografía de autor",
                "verbose_name_plural": "Biografías de autor",
            },
        ),
        migrations.AddField(
            model_name="actividadbienestar",
            name="categoria",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="sanamente.categoriaactividadbienestar",
            ),
        ),
        migrations.CreateModel(
            name="EntradaBlog",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("mostrar_imagen_principal", models.BooleanField(default=False)),
                ("intro", wagtail.fields.RichTextField()),
                (
                    "contenido",
                    wagtail.fields.StreamField(
                        [
                            ("texto_enriquecido", sanamente.blocks.RichTextBlock()),
                            (
                                "tabs",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "tab",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "expandible",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "item",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "linea_tiempo",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "evento",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "titulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "subtitulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "color",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Color,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "icono",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Icono,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "avatar",
                                                        sanamente.blocks.ImagenAvatarChooserBlock(
                                                            label="Avatar",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "boton_accion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "accion_tipo",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("", "Tipo de acción"),
                                                    ("sin_accion", "Sin acción"),
                                                    ("pagina", "Página"),
                                                    ("url", "URL"),
                                                ],
                                                classname="wagtailuiplus__choice-handler wagtailuiplus__choice-handler--accion_tipo",
                                            ),
                                        ),
                                        (
                                            "accion_pagina",
                                            wagtail.blocks.PageChooserBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--url wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_url",
                                            wagtail.blocks.URLBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--pagina wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_texto",
                                            wagtail.blocks.CharBlock(
                                                max_length=30, required=False
                                            ),
                                        ),
                                        (
                                            "accion_clase",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Color, required=False
                                            ),
                                        ),
                                        (
                                            "accion_alineacion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Alineación"),
                                                    ("izquierda", "Izquierda"),
                                                    ("centro", "Centro"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "icono",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Icono, required=False
                                            ),
                                        ),
                                        (
                                            "icono_posicion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("izquierda", "Izquierda"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        verbose_name="Contenido del cuerpo de la página",
                    ),
                ),
                (
                    "autor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sanamente.biografiaautor",
                    ),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sanamente.categoriaentradablog",
                    ),
                ),
                (
                    "imagen_principal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Entrada de blog",
                "verbose_name_plural": "Entradas de blog",
            },
            bases=("wagtailcore.page", models.Model),
        ),
        migrations.CreateModel(
            name="EntradaBlogEtiqueta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="sanamente.entradablog",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="entradablog",
            name="etiquetas",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="sanamente.EntradaBlogEtiqueta",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="NumeroTelefonicoEmergenciaEtiqueta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="sanamente.numerotelefonicoemergencia",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="numerotelefonicoemergencia",
            name="etiquetas",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="sanamente.NumeroTelefonicoEmergenciaEtiqueta",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="ServicioProfesional",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField()),
                (
                    "contenido",
                    wagtail.fields.StreamField(
                        [
                            ("texto_enriquecido", sanamente.blocks.RichTextBlock()),
                            (
                                "tabs",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "tab",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "expandible",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "item",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "etiqueta",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h2",
                                                                "h3",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "linea_tiempo",
                                wagtail.blocks.StreamBlock(
                                    [
                                        (
                                            "evento",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "titulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40
                                                        ),
                                                    ),
                                                    (
                                                        "subtitulo",
                                                        wagtail.blocks.CharBlock(
                                                            max_length=40,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "contenido",
                                                        wagtail.blocks.RichTextBlock(
                                                            features=[
                                                                "bold",
                                                                "italic",
                                                                "h4",
                                                                "h5",
                                                                "superscript",
                                                                "subscript",
                                                                "strikethrough",
                                                                "ol",
                                                                "ul",
                                                                "link",
                                                                "image",
                                                                "document-link",
                                                                "embed",
                                                                "blockquote",
                                                            ],
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "color",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Color,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "icono",
                                                        wagtail.snippets.blocks.SnippetChooserBlock(
                                                            sanamente.snippets.Icono,
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "avatar",
                                                        sanamente.blocks.ImagenAvatarChooserBlock(
                                                            label="Avatar",
                                                            required=False,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "boton_accion",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "accion_tipo",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("", "Tipo de acción"),
                                                    ("sin_accion", "Sin acción"),
                                                    ("pagina", "Página"),
                                                    ("url", "URL"),
                                                ],
                                                classname="wagtailuiplus__choice-handler wagtailuiplus__choice-handler--accion_tipo",
                                            ),
                                        ),
                                        (
                                            "accion_pagina",
                                            wagtail.blocks.PageChooserBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--url wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_url",
                                            wagtail.blocks.URLBlock(
                                                form_classname="wagtailuiplus__choice-handler-target--accion_tipo wagtailuiplus__choice-handler-hidden-if--pagina wagtailuiplus__choice-handler-hidden-if--ancla",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "accion_texto",
                                            wagtail.blocks.CharBlock(
                                                max_length=30, required=False
                                            ),
                                        ),
                                        (
                                            "accion_clase",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Color, required=False
                                            ),
                                        ),
                                        (
                                            "accion_alineacion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("", "Alineación"),
                                                    ("izquierda", "Izquierda"),
                                                    ("centro", "Centro"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                        (
                                            "icono",
                                            wagtail.snippets.blocks.SnippetChooserBlock(
                                                sanamente.snippets.Icono, required=False
                                            ),
                                        ),
                                        (
                                            "icono_posicion",
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ("izquierda", "Izquierda"),
                                                    ("derecha", "Derecha"),
                                                ],
                                                max_length=30,
                                                null=True,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                        ],
                        verbose_name="Contenido del cuerpo de la página",
                    ),
                ),
                ("areas_experiencia", wagtail.fields.RichTextField()),
                (
                    "telefono",
                    models.CharField(
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^([09]{1}\\d{2}|[1-9]{1}\\d{9})$",
                                message="Debe tener 3 o 10 dígitos y ser un número telefónico válido",
                            )
                        ],
                        verbose_name="Número telefónico",
                    ),
                ),
                ("domicilio", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True,
                        null=True,
                        srid=3857,
                        verbose_name="Ubicación geográfica",
                    ),
                ),
                ("es_servicio_publico", models.BooleanField(default=False)),
                (
                    "precio_minimo",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "precio_maximo",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cedula_profesional",
                    models.CharField(
                        max_length=8,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{8}$", message="Debe tener 8 dígitos"
                            )
                        ],
                    ),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sanamente.categoriaservicioprofesional",
                    ),
                ),
                (
                    "especialidad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sanamente.especialidadservicioprofesional",
                    ),
                ),
                (
                    "fotografia",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "modalidad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sanamente.modalidadservicioprofesional",
                    ),
                ),
            ],
            options={
                "verbose_name": "Servicio profesional",
                "verbose_name_plural": "Servicios profesionales",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ServicioProfesionalEtiqueta",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="sanamente.servicioprofesional",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="servicioprofesional",
            name="etiquetas",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="sanamente.ServicioProfesionalEtiqueta",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="ServicioProfesionalFavorito",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "servicio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sanamente.servicioprofesional",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Servicio profesional favorita",
                "verbose_name_plural": "servicios profesional favoritos",
            },
        ),
        migrations.CreateModel(
            name="ServicioProfesionalValoracion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "valoracion",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "servicio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sanamente.servicioprofesional",
                    ),
                ),
                (
                    "usuario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Valoracion de servicio profesional",
                "verbose_name_plural": "Valoraciones de servicios profesionales",
            },
        ),
    ]
